<project>
	<description>Tasks file</description>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
	  <classpath>
	    <pathelement location="${ant-contrib.jar.path}"/>
	  </classpath>
	</taskdef>		
	
	<!-- Clean build area -->
	<target name="clean" description="Clean the project">
		<echo message="========================================================================" />
		<echo message=".:[Maven] :: Cleaning the project..." />
		<echo message="========================================================================" />
		<exec executable="mvn" dir="${basedir}">
			<arg value="clean"/>
		</exec>
	</target>

	<!-- Init build area -->
	<target name="init" depends="clean" description="Initialize the project">
		<echo message="========================================================================" />
		<echo message=".:[Maven] :: Initializing the project..." />
		<echo message="========================================================================" />
		<exec executable="mvn" dir="${basedir}">
			<arg value="validate"/>
			<arg value="generate-test-resources"/>
		</exec>
	</target>

	<target name="compile" depends="clean" description="Compile the source ">
		<echo message="========================================================================" />
		<echo message=".:[Maven] :: Compiling the sources..." />
		<echo message="========================================================================" />
		<exec executable="mvn" dir="${basedir}">
			<arg value="compile"/>
			<arg value="test-compile"/>
		</exec>
	</target>

	<target name="WAR-build" depends="clean" description="Build the WAR">
		<echo message="========================================================================" />
		<echo message=".:[Maven] :: Packaging the WAR..." />
		<echo message="========================================================================" />
		<exec executable="mvn" dir="${basedir}">
			<env key="MAVEN_WORKING_MODE" value="production"/>
			<arg value="package"/>
			<arg line="-DskipTests"/>
		</exec>
	</target>

	<target name="WAR-build-standalone" depends="clean" description="Build the standalone executable WAR">
		<echo message="========================================================================" />
		<echo message=".:[Maven] :: Packaging the standalone executable WAR..." />
		<echo message="========================================================================" />
		<exec executable="mvn" dir="${basedir}">
			<env key="MAVEN_WORKING_MODE" value="exewar"/>
			<arg value="package"/>
			<arg line="-DskipTests"/>			
			<arg line="-DskipDerby=false"/>
		</exec>
		<move todir="${dist.path}/standalone">
			<fileset dir="${dist.path}">
				<include name="${webappname}*war-exec*.jar"/>
			</fileset>
		</move>
	</target>

	<target name="WAR-undeploy">
		<delete file="${tomcat.deploy.path}/${webappname}.war" />
	</target>

	<!-- deploy the distribution -->
	<target name="WAR-deploy" description="Copy the WAR to Tomcat">
		<copy file="${dist.path}/${webappname}.war" todir="${tomcat.deploy.path}" />
	</target>

	<target name="PG-db-backup-one-table">
		<echo message="|| ${tableToBeDumped} --> schema" />
		<exec executable="${postgres.bin.path}/${postgres.bin.dump}" dir="${basedir}/src/${project.src.branch}/db/export">
			<env key="PGPASSWORD" value="${postgres.password}"/>
			<arg value="-i"/>
			<arg line="-h ${postgres.hostname}"/>
			<arg line="-p ${postgres.port}"/>
			<arg line="-U ${postgres.username}"/>
			<arg line="-F p"/>
			<arg value="-s"/>
			<arg value="-O"/>
			<arg line="-t ${tableToBeDumped}" />
			<arg line="-f ${webappname}${test.marker}${db}_schema_${tableToBeDumped}.sql"/>
			<arg value="${webappname}${test.marker}${db}"/>
		</exec>

		<echo message="|| ${tableToBeDumped} --> data" />
		<exec executable="${postgres.bin.path}/${postgres.bin.dump}" dir="${basedir}/src/${project.src.branch}/db/export">
			<env key="PGPASSWORD" value="${postgres.password}"/>
			<arg value="-i"/>
			<arg line="-h ${postgres.hostname}"/>
			<arg line="-p ${postgres.port}"/>
			<arg line="-U ${postgres.username}"/>
			<arg line="-F p"/>
			<arg value="-a"/>
			<arg value="--column-inserts"/>
			<arg value="-O"/>
			<arg line="-t ${tableToBeDumped}" />
			<arg line="-f ${webappname}${test.marker}${db}_data_${tableToBeDumped}.sql"/>
			<arg value="${webappname}${test.marker}${db}"/>
		</exec>
	</target>

	<target name="PG-db-restore-one-table">
		<echo message="|| ${tableToBeRestored} --> schema" />
		<exec executable="${postgres.bin.path}/${postgres.bin.psql}" dir="${basedir}/src/${project.src.branch}/db/export">
			<env key="PGPASSWORD" value="${postgres.password}"/>
			<arg line="-h ${postgres.hostname}"/>
			<arg line="-p ${postgres.port}"/>
			<arg line="-U ${postgres.username}"/>
			<arg value="-q"/>
			<arg line="-f ${webappname}${test.marker}${db}_schema_${tableToBeRestored}.sql"/>
			<arg value="${webappname}${test.marker}${db}"/>
		</exec>

		<echo message="|| ${tableToBeRestored} --> data" />
		<exec executable="${postgres.bin.path}/${postgres.bin.psql}" dir="${basedir}/src/${project.src.branch}/db/export">
			<env key="PGPASSWORD" value="${postgres.password}"/>
			<arg line="-h ${postgres.hostname}"/>
			<arg line="-p ${postgres.port}"/>
			<arg line="-U ${postgres.username}"/>
			<arg value="-q"/>
			<arg line="-f ${webappname}${test.marker}${db}_data_${tableToBeRestored}.sql"/>
			<arg value="${webappname}${test.marker}${db}"/>
		</exec>
	</target>

	<target name="PG-db-backup" description="PostgreSQL db backup in SQL format with referential integrity">
		<echo message="Dumping ${webappname}${test.marker}Port...." />		
		<foreach target="PG-db-backup-one-table" param="tableToBeDumped" list="${db.backup.tables.port}" trim="true">
			<param name="db" value="Port" />
		</foreach>

		<echo message="Dumping ${webappname}${test.marker}Serv...." />
		<foreach target="PG-db-backup-one-table" param="tableToBeDumped" list="${db.backup.tables.serv}" trim="true">
			<param name="db" value="Serv" />
		</foreach>			
	</target>

	<target name="PG-db-restore" description="PostgreSQL db restore in SQL format with referential integrity">
		<echo message="Restoring ${webappname}${test.marker}Port...." />		
		<foreach target="PG-db-restore-one-table" param="tableToBeRestored" list="${db.backup.tables.port}" trim="true">
			<param name="db" value="Port" />
		</foreach>

		<echo message="Restoring ${webappname}${test.marker}Serv...." />
		<foreach target="PG-db-restore-one-table" param="tableToBeRestored" list="${db.backup.tables.serv}" trim="true">
			<param name="db" value="Serv" />
		</foreach>			
	</target>

	<target name="PG-db-drop">
		<echo message="Dropping ${webappname}${test.marker}Port...." />
		<exec executable="${postgres.bin.path}/${postgres.bin.drop}">
			<env key="PGPASSWORD" value="${postgres.password}"/>
			<arg line="-h ${postgres.hostname}"/>
			<arg line="-p ${postgres.port}"/>
			<arg line="-U ${postgres.username}"/>
			<arg value="${webappname}${test.marker}Port"/>
		</exec>
		<echo message="Dropping ${webappname}${test.marker}Serv...." />
		<exec executable="${postgres.bin.path}/${postgres.bin.drop}">
			<env key="PGPASSWORD" value="${postgres.password}"/>
			<arg line="-h ${postgres.hostname}"/>
			<arg line="-p ${postgres.port}"/>
			<arg line="-U ${postgres.username}"/>
			<arg value="${webappname}${test.marker}Serv"/>
		</exec>
	</target>

	<target name="PG-db-create">
		<echo message="Creating ${webappname}${test.marker}Port...." />
		<exec executable="${postgres.bin.path}/${postgres.bin.create}">
			<env key="PGPASSWORD" value="${postgres.password}"/>
			<arg line="-E UTF-8"/>
			<arg line="-O ${postgres.username}"/>
			<arg value="-e"/>
			<arg line="-h ${postgres.hostname}"/>
			<arg line="-p ${postgres.port}"/>
			<arg line="-U ${postgres.username}"/>
			<arg value="${webappname}${test.marker}Port"/>
		</exec>
		<echo message="Creating ${webappname}${test.marker}Serv...." />
		<exec executable="${postgres.bin.path}/${postgres.bin.create}">
			<env key="PGPASSWORD" value="${postgres.password}"/>
			<arg line="-E UTF-8"/>
			<arg line="-O ${postgres.username}"/>
			<arg value="-e"/>
			<arg line="-h ${postgres.hostname}"/>
			<arg line="-p ${postgres.port}"/>
			<arg line="-U ${postgres.username}"/>
			<arg value="${webappname}${test.marker}Serv"/>
		</exec>
	</target>

	<target name="PG-db-full-update" description="PostgreSQL db update from tar file" depends="PG-db-drop, PG-db-create, PG-db-restore">
		<echo message="Databases full update [done]" />
	</target>

	<target name="PG-db-restore-plugins" description="Execute the SQL queries necessary to properly install a Plugin and its dependecies">
		<foreach target="PG-db-restore-plugins-helper" param="pluginDir">
			<path>
				<dirset dir="${dist.path}/dependencies-unpacked/misc">
					<include name="entando-plugin-*"/>
				</dirset>
			</path>
		</foreach>
	</target>

	<target name="PG-db-restore-plugins-helper">
		<echo message="Restoring SQL for Plugins.... - Port" />
		<echo message="${pluginDir}" />
		<exec executable="${postgres.bin.path}/${postgres.bin.psql}" dir="${pluginDir}/sql/postgresql">
			<env key="PGPASSWORD" value="${postgres.password}"/>
			<arg line="-h ${postgres.hostname}"/>
			<arg line="-p ${postgres.port}"/>
			<arg line="-U ${postgres.username}"/>
			<arg line="-d ${webappname}Port"/>
			<arg line="-f port.sql"/>
		</exec>

		<echo message="Restoring SQL for Plugins.... - Serv" />
		<echo message="${pluginDir}" />		
		<exec executable="${postgres.bin.path}/${postgres.bin.psql}" dir="${pluginDir}/sql/postgresql">
			<env key="PGPASSWORD" value="${postgres.password}"/>
			<arg line="-h ${postgres.hostname}"/>
			<arg line="-p ${postgres.port}"/>
			<arg line="-U ${postgres.username}"/>
			<arg line="-d ${webappname}Serv"/>
			<arg line="-f serv.sql"/>
		</exec>
	</target>

	<target name="PG-db-restore-bundles" description="Execute the SQL queries necessary to properly install a Bundle">
		<foreach target="PG-db-restore-bundles-helper-sql" param="pluginDir">
			<path>
				<dirset dir="${dist.path}/dependencies-unpacked/misc">
					<include name="entando-misc-*"/>
					<include name="entando-content-*"/>
					<include name="entando-page-*"/>
					<include name="entando-showlet-*"/>					
				</dirset>
			</path>
		</foreach>
		<foreach target="PG-db-restore-bundles-helper-REST" param="pluginDir">
			<path>
				<dirset dir="${dist.path}/dependencies-unpacked/misc">
					<include name="entando-content-*"/>
				</dirset>
			</path>
		</foreach>
	</target>

	<target name="PG-db-restore-bundles-helper-REST">
		<echo message="REST calls for Bundles...." />
		<echo message="${pluginDir}" />
		<ant antfile="${pluginDir}/rest/build.xml" useNativeBasedir="true" />
	</target>

	<target name="PG-db-restore-bundles-helper-sql">
		<echo message="Restoring SQL for Bundles.... - Port" />
		<echo message="${pluginDir}" />
		<exec executable="${postgres.bin.path}/${postgres.bin.psql}" dir="${pluginDir}/sql/postgresql">
			<env key="PGPASSWORD" value="${postgres.password}"/>
			<arg line="-h ${postgres.hostname}"/>
			<arg line="-p ${postgres.port}"/>
			<arg line="-U ${postgres.username}"/>
			<arg line="-d ${webappname}Port"/>
			<arg line="-f port.sql"/>
		</exec>

		<echo message="Restoring SQL for Bundles.... - Serv" />
		<echo message="${pluginDir}" />		
		<exec executable="${postgres.bin.path}/${postgres.bin.psql}" dir="${pluginDir}/sql/postgresql">
			<env key="PGPASSWORD" value="${postgres.password}"/>
			<arg line="-h ${postgres.hostname}"/>
			<arg line="-p ${postgres.port}"/>
			<arg line="-U ${postgres.username}"/>
			<arg line="-d ${webappname}Serv"/>
			<arg line="-f serv.sql"/>
		</exec>
	</target>


    <target name="Test-db-resources-check">
		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
			<classpath>
				<pathelement location="/usr/share/java/ant-contrib.jar" />
			</classpath>
		</taskdef>
		
		<if>
			<and>
				<resourceexists>
					<file file="${basedir}/src/test/db/tar/${webappname}testPort.backup.bz2" />
				</resourceexists>
				<resourceexists>
					<file file="${basedir}/src/test/db/tar/${webappname}testServ.backup.bz2" />
				</resourceexists>
			</and>
			<then>
				<property name="test.database.resources" value="tar" />
			</then>
			<elseif>
				<and>
					<resourceexists>
						<file file="${basedir}/src/test/db/export/${webappname}testPort_schema.sql" />
					</resourceexists>
					<resourceexists>
						<file file="${basedir}/src/test/db/export/${webappname}testPort_data.sql" />
					</resourceexists>
					<resourceexists>
						<file file="${basedir}/src/test/db/export/${webappname}testServ_schema.sql" />
					</resourceexists>
					<resourceexists>
						<file file="${basedir}/src/test/db/export/${webappname}testServ_data.sql" />
					</resourceexists>					
				</and>
				<then>
					<property name="test.database.resources" value="custom" />
					<property name="test.database.basepath" value="${basedir}/src/test/db/export"/>
					<property name="test.database.basename" value="${webappname}"/>		
				</then>
			</elseif>
			<else>
				<property name="test.database.resources" value="core" />
			</else>
		</if>		
    </target>
	
	<target name="Test-init" description="Use it to restore databases and compile classes for tests" depends="Test-db-resources-check">
		<if>
			<equals arg1="${test.database.resources}" arg2="tar" />
			<then>
				<echo message="========================================================================" />
				<echo message=".:[Ant] :: Updating test DBs only" />
				<echo message="        :: Using files in: ${basedir}/src/test/db/tar" />
				<echo message="========================================================================" />
				<antcall target="PG-db-full-update">
					<param name="test.marker" value="test" />
					<param name="project.src.branch" value="test" />					
				</antcall>
			</then>
			<elseif>
				<equals arg1="${test.database.resources}" arg2="custom" />
				<then>
					<echo message="========================================================================" />
					<echo message=".:[Maven] :: Getting ready for Tests" />
					<echo message="          :: Using files in: ${basedir}/src/test/db/export" />
					<echo message="========================================================================" />
					<exec executable="mvn" dir="${basedir}">
						<arg value="process-test-classes"/>
						<arg line="-Dtest.database.basename=${test.database.basename}" />
						<arg line="-Dtest.database.basepath=${test.database.basepath}" />					
					</exec>
				</then>
			</elseif>
			<elseif>
				<equals arg1="${test.database.resources}" arg2="core" />
				<then>
					<echo message="========================================================================" />
					<echo message=".:[Maven] :: Getting ready for Tests" />
					<echo message="          :: Using files from entando-core-engine" />				
					<echo message="========================================================================" />
					<exec executable="mvn" dir="${basedir}">
						<arg value="process-test-classes"/>
					</exec>
				</then>
			</elseif>
		</if>
	</target>

	<target name="Test-PG-db-backup" description="Test - PG db backup in TAR format">
		<antcall target="PG-db-backup">
			<param name="test.marker" value="test" />
			<param name="project.src.branch" value="test" />			
		</antcall>              
	</target>	

	<target name="Test-PG-db-export-SQL" description="Test - PG db backup in plain SQL">
		<antcall target="PG-db-export-SQL">
			<param name="test.marker" value="test" />
			<param name="project.src.branch" value="test" />
		</antcall>
	</target>

	<target name="Test" description="Run Unit Tests" depends="Test-db-resources-check">
		<if>
			<equals arg1="${test.database.resources}" arg2="custom" />
			<then>
				<echo message="========================================================================" />
				<echo message=".:[Maven] :: Running the Tests..." />
				<echo message="          :: Using files in: ${basedir}/src/test/db/export" />
				<echo message="========================================================================" />
				<exec executable="mvn" dir="${basedir}">
					<arg value="test"/>
					<arg line="-Dtest.database.basename=${test.database.basename}" />
					<arg line="-Dtest.database.basepath=${test.database.basepath}" />					
				</exec>
			</then>
			<elseif>
				<equals arg1="${test.database.resources}" arg2="core" />
				<then>
					<echo message="========================================================================" />
					<echo message=".:[Maven] :: Running the Tests..." />
					<echo message="          :: Using files from entando-core-engine" />				
					<echo message="========================================================================" />
					<exec executable="mvn" dir="${basedir}">
						<arg value="test"/>
					</exec>
				</then>
			</elseif>
		</if>
	</target>

	<!-- Generate Site -->
	<target name="Site" description="Generate the Site">
		<echo message="========================================================================" />
		<echo message=".:[Maven] :: Generating the Site..." />
		<echo message="========================================================================" />
		<exec executable="mvn" dir="${basedir}">
			<arg value="site"/>
		</exec>
	</target>
	
	<!-- MySQL -->
	<target name="MySql-db-backup" description="MySQL db backup">
		<echo message="Dumping ${webappname}${test.marker}Port" />
		<exec executable="${mysql.bin.path}/${mysql.bin.dump}" dir="${basedir}/src/${project.src.branch}/db/mysql/">
			<arg line=" -h${mysql.hostname}"/>
			<arg line=" -P${mysql.port}"/>
			<arg line=" -u${mysql.username}"/>
			<arg line=" -p${mysql.password}"/>
			<arg line="--database" />
			<arg line="${webappname}${test.marker}Port"/>
			<arg line="-r"/>
			<arg path="${basedir}/src/${project.src.branch}/db/mysql/${webappname}${test.marker}Port.sql" />
		</exec>
		<echo message="${webappname}${test.marker}Port dumped." />
		<echo message="Dumping ${webappname}${test.marker}Serv" />
		<exec executable="${mysql.bin.path}/${mysql.bin.dump}" dir="${basedir}/src/${project.src.branch}/db/mysql/">
			<arg line=" -h${mysql.hostname}"/>
			<arg line=" -P${mysql.port}"/>
			<arg line=" -u${mysql.username}"/>
			<arg line=" -p${mysql.password}"/>
			<arg line="--database" />
			<arg line="${webappname}${test.marker}Serv"/>
			<arg line="-r"/>
			<arg path="${basedir}/src/${project.src.branch}/db/mysql/${webappname}${test.marker}Serv.sql" />
		</exec>
		<echo message="${webappname}${test.marker}Serv dumped." />
	</target>

	<target name="MySql-db-restore" description="MySQL db restore">
		<echo message="Restoring ${webappname}${test.marker}Port..." />
		<exec executable="${mysql.bin.path}/${mysql.bin.restore}" dir="${basedir}/src/${project.src.branch}/db/mysql/">
			<arg line=" -h${mysql.hostname}"/>
			<arg line=" -P${mysql.port}"/>
			<arg line=" -u${mysql.username}"/>
			<arg line=" -p${mysql.password}"/>
			<arg line=" -e"/>
			<arg line=' "source ${basedir}/src/${project.src.branch}/db/mysql/${webappname}${test.marker}Port.sql" '/>
		</exec>
		<echo message="...${webappname}${test.marker}Port Restored." />
		<echo message="Restoring ${webappname}${test.marker}Serv..." />
		<exec executable="${mysql.bin.path}/${mysql.bin.restore}" dir="${basedir}/src/${project.src.branch}/db/mysql/">
			<arg line=" -h${mysql.hostname}"/>
			<arg line=" -P${mysql.port}"/>
			<arg line=" -u${mysql.username}"/>
			<arg line=" -p${mysql.password}"/>
			<arg line=" -e"/>
			<arg line=' "source ${basedir}/src/${project.src.branch}/db/mysql/${webappname}${test.marker}Serv.sql" '/>
		</exec>
		<echo message="...${webappname}${test.marker}Serv Restored." />
	</target>

	<target name="MySql-db-drop" description="MySql db drop">
		<echo message="Dropping ${webappname}${test.marker}Port..." />
		<exec executable="${mysql.bin.path}/${mysql.bin.drop}" dir="${basedir}/src/${project.src.branch}/db/mysql/">
			<arg line=" -h${mysql.hostname}"/>
			<arg line=" -P${mysql.port}"/>
			<arg line=" -u${mysql.username}"/>
			<arg line=" -p${mysql.password}"/>
			<arg line=" -e"/>
			<arg line=' "drop database ${webappname}${test.marker}Port;" '/>
		</exec>
		<echo message="... ${webappname}${test.marker}Port dropped." />
		<echo message="Dropping ${webappname}${test.marker}Serv" />
		<exec executable="${mysql.bin.path}/${mysql.bin.drop}" dir="${basedir}/src/${project.src.branch}/db/mysql/">
			<arg line=" -h${mysql.hostname}"/>
			<arg line=" -P${mysql.port}"/>
			<arg line=" -u${mysql.username}"/>
			<arg line=" -p${mysql.password}"/>
			<arg line=" -e"/>
			<arg line=' "drop database ${webappname}${test.marker}Serv;" '/>
		</exec>
		<echo message="... ${webappname}${test.marker}Serv dropped." />
	</target>

	<target name="MySql-db-full-update" description="MySql db update" depends="MySql-db-drop, MySql-db-restore">
		<echo message="Databases full update [done]" />
	</target>
	
</project>
